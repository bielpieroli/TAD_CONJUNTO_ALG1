Relatório - Trabalho 2 - Algoritmos e Estuturas de dados
Dante Brito Lourenço - 15447326 e João Gabriel Pieroli da Silva - 15678578

Para a implementação do TAD Conjunto, escolhemos duas estruturas de dados: 
LLRBT (Left-Leaning Red-Black Tree) e AVL Tree. Ambas são árvores de busca binária 
autobalanceadas que oferecem excelente desempenho para as operações necessárias, garantindo 
eficiência superior, em comparação com estruturas como listas encadeadas.

Justificativa para a escolha das estruturas de dados:

Red-Black Tree
A Red-Black Tree é uma estrutura de dado que mantém um balanceamento próximo ao ideal, 
garantindo que a profundidade da árvore seja no máximo 2*log(n). 
É possível argumentar que as operações de inserção e remoção têm desempenho eficiente devido 
à sua estratégia de balanceamento menos rigorosa, o que pode resultar em menos rotações comparado à AVL.
Apesar de tudo, a rotação e inserção na AVL são muito semelhantes em eficiência na prática.

Árvore AVL
A Árvore AVL é uma estrutura de dados que garante um balanceamento estrito, mantendo a diferença
de altura entre subárvores adjacentes sempre menor ou igual a 1. Devido ao balanceamento mais 
rigoroso, a AVL Tree tem desempenho levemente melhor em operações de busca, pois a altura é minimizada.
É ideal para situações onde a frequência de consultas (buscas) é maior que a de inserções e remoções.


Apesar das diferenças entre si, ambas tem propriedades semelhantes, que permitem que as 
operações específicas sejam realizadas da maneira mais eficiente possível. Todas as operações principais, 
sendo busca, inserção e remoção, possuem complexidade O(log(n)), independentemente da ordem de inserção 
dos elementos.

PERTENCE:
Para essa operação estamos fazendo uma busca simples do elemento pela árvore, o que pode ser equivalente
a percorrer a altura máxima da árvore. Conhecendo as propriedades de suas alturas, na RBT temos uma 
altura máxima percorrida de 2log(n), e na AVL temos log(n)+1. Dessa forma, embora tenham complexidades
assintóticas equivalentes de O(log(n)), a AVL possui um desempenho levemente melhor para essa operação.

UNIÃO:
Em ambas as estruturas, foi implementado o método da seguinte maneira: Faça um percurso pela árvore A,
e adicione estes elementos em C, e repita o mesmo processo para B. Como as estruturas não permitem
réplicas, isso resulta em uma união. Sabendo que esse processo depende criticamente da inserção na
estrutura, é complicado avaliar a estrutura mais vantajosa, visto que são similares nesse atributo.
Sendo n o tamanho de A e m o tamanho de B, temos uma complexidade final de O(mlogm +nlogn).

INTERSEÇÃO:
Em ambas as estruturas, foi implementado o método da seguinte maneira: Faça um percurso pela árvore B,
e verifique se cada elemento está presente em A, para adicioná-lo em C caso esteja. Desta forma, a busca
em A é crítica e a inserção é muito importante para a eficiência.
Novamente, por conta dessas diversas nuances no método desenvolvido, é difícil de avaliar com certeza 
a estrutura mais vantajosa, visto que são similares nesse atributo.
Sendo n o tamanho de A e m o tamanho de B, temos uma complexidade final de O(mlogn).
